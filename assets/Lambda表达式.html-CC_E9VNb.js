import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as a,c as s,e as t}from"./app-SAdujynt.js";const e={},p=t(`<h1 id="lambda表达式" tabindex="-1"><a class="header-anchor" href="#lambda表达式"><span>Lambda表达式</span></a></h1><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> demo <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">interface</span> demo1<span class="token punctuation">{</span>
        <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">goShow</span><span class="token punctuation">(</span>demo1 demo1<span class="token punctuation">)</span><span class="token punctuation">{</span>
        demo1<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">goShow</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token function">demo1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;show执行了&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;-----------&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token doc-comment comment">/**
         * 无参数无返回值的 Lambda 表达式
         *
         * TODO:
         *     (参数类型 参数名称):参数列表
         *     <span class="token punctuation">{</span>代码体;<span class="token punctuation">}</span> :方法体
         *     -&gt; : 箭头，分割参数列表和方法体
         */</span>
        <span class="token function">goShow</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Lambda show执行了&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Lambda表达式在程序运行的时候会形成一个类。</p><ol><li>在类中新增了一个方法，这个方法的方法体就是Lambda表达式中的代码</li><li>还会形成一个匿名内部类，实现接口，重写抽象方法</li><li>在接口中重写方法会调用新生成的方法</li></ol><h2 id="省略写法" tabindex="-1"><a class="header-anchor" href="#省略写法"><span>省略写法</span></a></h2><p>在lambda表达式的标准写法基础上，可以使用省略写法的规则为：</p><ol><li>小括号内的参数类型可以省略</li><li>如果小括号内有且仅有一个参数，则小括号可以省略</li><li>如果大括号内有且仅有一个语句，可以同时省略大括号，return 关键字及语句分号。</li></ol><h2 id="使用前提" tabindex="-1"><a class="header-anchor" href="#使用前提"><span>使用前提</span></a></h2><p>Lambda表达式的语法是非常简洁的，但是Lambda表达式不是随便使用的，使用时有几个条件要特别注意</p><ol><li>方法的参数或局部变量类型必须为接口才能使用Lambda</li><li>接口中有且仅有一个抽象方法(@FunctionalInterface)</li></ol>`,10),o=[p];function c(i,l){return a(),s("div",null,o)}const r=n(e,[["render",c],["__file","Lambda表达式.html.vue"]]),m=JSON.parse(`{"path":"/guide/JDK8%E6%96%B0%E7%89%B9%E6%80%A7/Lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F.html","title":"Lambda表达式","lang":"zh-CN","frontmatter":{"description":"Lambda表达式 Lambda表达式在程序运行的时候会形成一个类。 在类中新增了一个方法，这个方法的方法体就是Lambda表达式中的代码 还会形成一个匿名内部类，实现接口，重写抽象方法 在接口中重写方法会调用新生成的方法 省略写法 在lambda表达式的标准写法基础上，可以使用省略写法的规则为： 小括号内的参数类型可以省略 如果小括号内有且仅有一个参...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/docs/guide/JDK8%E6%96%B0%E7%89%B9%E6%80%A7/Lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F.html"}],["meta",{"property":"og:site_name","content":"CYLIN'S"}],["meta",{"property":"og:title","content":"Lambda表达式"}],["meta",{"property":"og:description","content":"Lambda表达式 Lambda表达式在程序运行的时候会形成一个类。 在类中新增了一个方法，这个方法的方法体就是Lambda表达式中的代码 还会形成一个匿名内部类，实现接口，重写抽象方法 在接口中重写方法会调用新生成的方法 省略写法 在lambda表达式的标准写法基础上，可以使用省略写法的规则为： 小括号内的参数类型可以省略 如果小括号内有且仅有一个参..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-11T06:27:50.000Z"}],["meta",{"property":"article:author","content":"cylin"}],["meta",{"property":"article:modified_time","content":"2024-04-11T06:27:50.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Lambda表达式\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-04-11T06:27:50.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"cylin\\",\\"url\\":\\"https://docs.cylin.cn\\"}]}"]]},"headers":[{"level":2,"title":"省略写法","slug":"省略写法","link":"#省略写法","children":[]},{"level":2,"title":"使用前提","slug":"使用前提","link":"#使用前提","children":[]}],"git":{"createdTime":1712816870000,"updatedTime":1712816870000,"contributors":[{"name":"cyl","email":"ucascyl@gmail.com","commits":1}]},"readingTime":{"minutes":1.19,"words":358},"filePathRelative":"guide/JDK8新特性/Lambda表达式.md","localizedDate":"2024年4月11日","autoDesc":true}`);export{r as comp,m as data};
